# –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ CustomTkinter
# –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ—É—Ç–±—É–∫–æ–≤ —Å YandexMarket

import customtkinter as ctk
import threading
from main import *

ctk.set_default_color_theme("dark-blue")
ctk.set_appearance_mode("dark")

class ParserApp(ctk.CTk):
    def __init__(self):
        super().__init__()

        self.title("üíª YandexMarket –ü–∞—Ä—Å–µ—Ä")
        self.geometry("500x400")
        self.resizable(False, False)

        ctk.CTkLabel(self, text="–ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ—É—Ç–±—É–∫–æ–≤", font=ctk.CTkFont(size=20, weight="bold")).pack(pady=20)

        # –ö–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
        ctk.CTkLabel(self, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤:").pack()
        self.entry_count = ctk.CTkEntry(self, placeholder_text="–Ω–∞–ø—Ä–∏–º–µ—Ä, 50")
        self.entry_count.insert(0, "50")
        self.entry_count.pack(pady=5)

        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
        ctk.CTkLabel(self, text="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:").pack()
        self.entry_min_price = ctk.CTkEntry(self, placeholder_text="–Ω–∞–ø—Ä–∏–º–µ—Ä, 10000")
        self.entry_min_price.insert(0, "10000")
        self.entry_min_price.pack(pady=5)

        ctk.CTkLabel(self, text="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:").pack()
        self.entry_max_price = ctk.CTkEntry(self, placeholder_text="–Ω–∞–ø—Ä–∏–º–µ—Ä, 50000")
        self.entry_max_price.insert(0, "50000")
        self.entry_max_price.pack(pady=5)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞
        self.parse_button = ctk.CTkButton(self, text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥", command=self.start_thread)
        self.parse_button.pack(pady=10)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø–æ–ª–µ
        self.output_text = ctk.CTkTextbox(self, height=200, width=450)
        self.output_text.pack(pady=10)
        self.output_text.insert("end", "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...\n")
        self.output_text.configure(state="disabled")

    def log(self, message):
        self.output_text.configure(state="normal")
        self.output_text.insert("end", f"{message}\n")
        self.output_text.see("end")
        self.output_text.configure(state="disabled")

    def start_thread(self):
        thread = threading.Thread(target=self.run_parser_gui)
        thread.start()

    def run_parser_gui(self):
        try:
            self.log("üîç –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω...")
            count = int(self.entry_count.get())
            min_price = int(self.entry_min_price.get())
            max_price = int(self.entry_max_price.get())
            result = run_parser(max_items=count, min_price=min_price, max_price=max_price)
            self.log(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ.")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    app = ParserApp()
    app.mainloop()
